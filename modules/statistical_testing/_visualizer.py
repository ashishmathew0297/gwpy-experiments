import math as math
import pycbc as pycbc
import numpy as np
import pandas as pd
from scipy import stats
import matplotlib.pyplot as plt
from gwpy.timeseries import TimeSeries
from matplotlib.ticker import ScalarFormatter
from sklearn import metrics
from typing import Literal

from ._data import get_section_statistics

def display_statistic_pvalue_histogram(data_df: pd.DataFrame) -> None:
    '''
    A function to plot a histogram of the shapiro p-values from the input dataframe generated by `fetch_glitch_data()`

    Input:
    - `data_df`: The whole, or a section of the input dataframe. Must contain ['shapiro_pvalue']

    Display:
    A histogram of the Shapiro test p-values for the glitch samples 
    '''
    plt.hist(data_df['shapiro_pvalue'], bins=40)
    # plt.xscale('log')
    plt.xlabel('Shapiro p-value')
    plt.ylabel('Frequency')
    plt.xticks(list(np.arange(data_df['shapiro_pvalue'].min(), data_df['shapiro_pvalue'].max()+0.01, 0.01)), fontsize=8, rotation=90)
    # plt.xticks(np.arange(0, 0.04*tw, 0.01), fontsize=8)
    # plt.xticks(list(plt.xticks()[0]) + [0.05])
    plt.title('Histogram of Shapiro p-values')
    plt.grid(True)
    plt.show()
    print(f"Number of Shapiro p-values above 0.05: {(data_df['shapiro_pvalue'] > 0.05).sum()}")
    print(f"Max Shapiro p-value: {data_df['shapiro_pvalue'].max()}")
    print(f"Min Shapiro p-value: {data_df['shapiro_pvalue'].min()}")

def display_glitch_plots(data: pd.DataFrame, glitch_index: int) -> None:
    '''
    A function to display a sample glitch from the input dataframe generated by `fetch_glitch_data()`

    Input:
    - `data`: A single row of the input dataframe. Must contain ['t', 'y', 'noise', 'q_transform'].

    Display:
    A plot of the whitened glitch, the unwhitened glitch, and the q-transform of the glitch
    '''
    fig, ax = plt.subplots(1,3, figsize=(24, 6))
    ax[0].plot(data['t'].iloc[glitch_index], data['y'].iloc[glitch_index])
    ax[0].set_xlabel("Time (s)")
    ax[0].set_ylabel("Amplitude")
    ax[0].legend()

    ax[1].plot(data['t'].iloc[glitch_index],data["glitch_timeseries"].iloc[glitch_index])
    ax[2].set_xlabel("Time (s)")
    ax[1].set_ylabel("Amplitude")
    ax[1].legend()

    ax[2].imshow(data['q_scan'].iloc[glitch_index])
    ax[2].set_yscale('log', base=2)
    ax[2].set_xscale('linear')
    ax[2].set_ylabel('Frequency (Hz)')
    ax[2].set_xlabel('Time (s)')
    ax[2].images[0].set_clim(0, 25.5)
    fig.colorbar(ax[2].images[0], ax=ax[2], label='Normalized energy', orientation='vertical', fraction=0.046, pad=0.04)

    plt.show()

def display_probability_plot(sample_glitch: pd.DataFrame) -> None:
    '''
    A function to display the Q-Q/probability plot of a sample glitch from the input dataframe generated by `fetch_glitch_data()`

    Input:
    - `sample_glitch`: A **single row** of the input dataframe. Must contain ['GPStime', 'y', 'shapiro_pvalue'].

    Display:
    A plot of the glitch sample timeseries with sections highlighted to show the  
    '''
    fig,ax = plt.subplots(1,2, figsize=(12,5))
    stats.probplot(sample_glitch["y"], dist="norm", plot=ax[0])
    ax[1].axis("off")
    ax[1].text(0.1, 0.5, f'Shapiro p-value = {sample_glitch["shapiro_pvalue"]}\nGPS Time = {sample_glitch["GPStime"]}', 
               horizontalalignment='left', 
               verticalalignment='center', 
               fontsize=14, 
               bbox=dict(facecolor='white', edgecolor='black', boxstyle='round,pad=1'))
    plt.show()

def display_section_statistics(data: pd.DataFrame, stat_test: Literal["Shapiro", "KS", "Anderson"]="Shapiro", section_size_seconds: float=1) -> None:
    '''
    A funtion to display one of the following:
    - Shapiro-Wilks Test p-values
    - Kolmogorov-Smirnov Test p-value
    - Anderson-Darling Statistics
    
    of sections of a sample glitch from the input dataframe generated by `fetch_glitch_data()`

    Input:
    - **data:** A **single row** of glitch information. Must contain ['t', 'y', 'shapiro_pvalue']
    - **stat_test:** The test being performed on the sections (values=["Shapiro", "KS", "Anderson"]). Default="Shapiro".
    - **sections:** The number of sections being studied. Default=1.

    Display:
    A plot of
    - The glitch sample timeseries with sections highlighted to show the concerned statistics for each section.
    - A Q-Q plot of the whole sample
    - Sample Information

    '''

    infotext = ""
    sectionstats = get_section_statistics(data, stat_test,section_size_seconds)

    fig, ax = plt.subplots(3, 1, figsize=(12,12))
    plt.suptitle(f"{stat_test} Test Statistics for section size={section_size_seconds}")
    ax[0].plot(data['t'], data['y'])

    for i, section in enumerate(sectionstats):
        if len(section['y']) > 0:
            if stat_test == "Shapiro" or stat_test == "KS":
                text = f"p={section['section_statistic']['pvalue']:.3f}"
                print(section['section_statistic']['pvalue'])
            elif stat_test == "Anderson":
                if not math.isnan(section['section_statistic']['statistic']):
                    text = f"stat={section['section_statistic']['statistic']:.3f}"
                    print(f"Section {i+1}: \nAD Statistic= {section['section_statistic']['statistic']}\nCritical Values={section['section_statistic']['critical_values']}")
            if not np.isnan(section['section_statistic']['statistic']):
                filled_area = ax[0].fill_between(section['t'], min(section['y']), max(section['y']), alpha=0.5)
                (x0, y0), (x1, y1) = filled_area.get_paths()[0].get_extents().get_points()
                ax[0].text((x0 + x1) / 2, y1+8, f'{text}', ha='center', va='center', fontsize=8, color='black')
    
    if stat_test == "Shapiro":
        infotext = f'GPS Time = {data["GPStime"]}\nDuration = {data["duration"]}\nKurtosis: {data['kurtosis']}\nSkew: {data['skew']}\nShapiro p-value = {data["shapiro_pvalue"]}'
    elif stat_test == "KS":
        infotext = f'GPS Time = {data["GPStime"]}\nDuration = {data["duration"]}\nKurtosis: {data['kurtosis']}\nSkew: {data['skew']}\nKS p-value = {data["ks_pvalue"]}'
    elif stat_test == "Anderson":
        ad_stat = stats.anderson(data["y"], dist='norm')
        infotext = f'GPS Time = {data["GPStime"]}\nDuration = {data["duration"]}\nKurtosis: {data['kurtosis']}\nSkew: {data['skew']}\nAD Statistic = {data["ad_statistic"]}\nCritical Values={data["ad_critical_values"]}\nSignificance Level={data["ad_significance_level"]}'
    
    stats.probplot(data["y"], dist="norm", plot=ax[1])

    ax[2].axis('off')
    ax[2].text(0.35, 0.5, infotext, 
            horizontalalignment='left', 
            verticalalignment='center', 
            fontsize=14, 
            bbox=dict(facecolor='white', edgecolor='black', boxstyle='round,pad=1'))

def generate_confusion_matrix(data: pd.Series, stat_test: Literal["Shapiro", "KS", "Anderson"]="Shapiro") -> None:
    '''
    Generate a confusion matrix for the performance of the relevant statistical tests on the signal sample. The statistical tests being considered are
    - Shapiro-Wilks Test
    - Kolmogorov-Smirnov Test
    - Anderson-Darling Test

    Inputs:
    - `data`: The dataset of IFO signal information being studied.
    - `stat_test`: The statistical test being considered.

    Display:
    - Confusion matrix for the concerned statistic.
    '''

    cm = []

    if stat_test == "Shapiro":
        cm = metrics.confusion_matrix(np.ones(len(data)),data["shapiro_prediction"],labels=[1,0])
    if stat_test == "KS":
        cm = metrics.confusion_matrix(np.ones(len(data)),data["ks_prediction"],labels=[1,0])
    # TODO: Decide on significance level for AD statistic
    
    disp = metrics.ConfusionMatrixDisplay(cm, display_labels=["Glitch Present", "Glitch Not Present"])
    disp.plot()
    plt.grid(False)
    plt.show()